import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'SidebarPage.dart';
import 'model/User.dart';
import 'package:geolocator/geolocator.dart';
import 'SidebarPageDriver.dart';

class BusStop {
  final String id;
  final String name;
  final LatLng position;

  BusStop({
    required this.id,
    required this.name,
    required this.position
  });
}

class BusRoutePage extends StatefulWidget {
  String mainStatus;

  BusRoutePage({
    required this.mainStatus
  });

  @override
  _BusRoutePage createState() => _BusRoutePage();
}

class _BusRoutePage extends State<BusRoutePage> {
  bool _isSatelliteView = false;

  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  final List<BusStop> busStopsRoute1 = [
    BusStop(
      id: 'SJ100-1',
      name: 'PFC',
      position: LatLng(2.991720962366472, 101.707556203837),
    ),
    BusStop(
      id: 'SJ162-1',
      name: 'KTAG',
      position: LatLng(2.9906065922278406, 101.71072672072536), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ164-1',
      name: 'K14',
      position: LatLng(2.9928782265949017, 101.71825515618721), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ832-1',
      name: 'IBS',
      position: LatLng(2.9997608272333394, 101.72158870448789), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ144-1',
      name: 'FBMK',
      position: LatLng(2.9999843428909356, 101.71484887998834), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ155-1',
      name: 'FSKTM',
      position: LatLng(2.9999691454681097, 101.71106029602586),
    ),
    BusStop(
      id: 'SJ159-1',
      name: 'FS',
      position: LatLng(3.0007085010742323, 101.7068627631204), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ160-1',
      name: 'PSAS',
      position: LatLng(3.0026803506513735, 101.70695294223508), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ151-1',
      name: 'FSTM',
      position: LatLng(3.004266665826632, 101.70862908173052), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ153-1',
      name: 'Central',
      position: LatLng(3.0012917167440483, 101.70969564394254), // Replace with the actual coordinates
    ),
  ];

  final List<BusStop> busStopsRoute2 = [
    BusStop(
      id: 'SJ163-2',
      name: 'SFC',
      position: LatLng(2.9921172880176776, 101.71541414629283), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ162-2',
      name: 'KTAG',
      position: LatLng(2.9906065922278406, 101.71072672072536), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ164-2',
      name: 'K14',
      position: LatLng(2.9928782265949017, 101.71825515618721), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ832-2',
      name: 'IBS',
      position: LatLng(2.9997608272333394, 101.72158870448789), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ144-2',
      name: 'FBMK',
      position: LatLng(2.9999843428909356, 101.71484887998834), // Replace with the actual coordinates
    ),

    BusStop(
      id: 'SJ155-2',
      name: 'FSKTM',
      position: LatLng(2.9999691454681097, 101.71106029602586),
    ),
    BusStop(
      id: 'SJ159-2',
      name: 'FS',
      position: LatLng(3.0007085010742323, 101.7068627631204), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ160-2',
      name: 'PSAS',
      position: LatLng(3.0026803506513735, 101.70695294223508), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ151-2',
      name: 'FSTM',
      position: LatLng(3.004266665826632, 101.70862908173052), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ153-2',
      name: 'Central',
      position: LatLng(3.0012917167440483, 101.70969564394254), // Replace with the actual coordinates
    ),
  ];

  final List<BusStop> busStopsRoute3 = [
    BusStop(
      id: '111',
      name: 'FRSB',
      position: LatLng(3.003399376837077, 101.72039834803533), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ144-3',
      name: 'FBMK',
      position: LatLng(2.9999843428909356, 101.71484887998834), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ155-3',
      name: 'FSKTM',
      position: LatLng(2.9999691454681097, 101.71106029602586),
    ),
    BusStop(
      id: 'SJ159-3',
      name: 'FS',
      position: LatLng(3.0007085010742323, 101.7068627631204), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ160-3',
      name: 'PSAS',
      position: LatLng(3.0026803506513735, 101.70695294223508), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ151-3',
      name: 'FSTM',
      position: LatLng(3.004266665826632, 101.70862908173052), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ153-3',
      name: 'Central',
      position: LatLng(3.0012917167440483, 101.70969564394254), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ101-3',
      name: 'KAA',
      position: LatLng(3.0002087160519513, 101.71523932855689), // Replace with the actual coordinates
    ),
    BusStop(
      id: '1111',
      name: 'K10',
      position: LatLng(3.0098003882950177, 101.71972624064571), // Replace with the actual coordinates
    ),

  ];

  final List<BusStop> busStopsRoute4 = [
    BusStop(
      id: 'SJ101-4',
      name: 'KAA',
      position: LatLng(3.0002087160519513, 101.71523932855689), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ144-4',
      name: 'FBMK',
      position: LatLng(2.9999843428909356, 101.71484887998834), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ155-4',
      name: 'FSKTM',
      position: LatLng(2.9999691454681097, 101.71106029602586),
    ),
    BusStop(
      id: 'SJ159-4',
      name: 'FS',
      position: LatLng(3.0007085010742323, 101.7068627631204), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ160-4',
      name: 'Library',
      position: LatLng(3.0026803506513735, 101.70695294223508), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ151-4',
      name: 'FSTM',
      position: LatLng(3.004266665826632, 101.70862908173052), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ153-4',
      name: 'Central',
      position: LatLng(3.0012917167440483, 101.70969564394254), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ800-4',
      name: 'KMB',
      position: LatLng(2.9783026611102827, 101.71456541612027), // Replace with the actual coordinates
    ),
  ];

  final List<BusStop> busStopsRoute5 = [
    BusStop(
      id: 'SJ163-5',
      name: 'SFC',
      position: LatLng(2.9921172880176776, 101.71541414629283), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ162-5',
      name: 'KTAG',
      position: LatLng(2.9906065922278406, 101.71072672072536), // Replace with the actual coordinates
    ),
    BusStop(
      id: 'SJ100-5',
      name: 'PFC',
      position: LatLng(2.991720962366472, 101.707556203837),
    ),
    BusStop(
      id: 'SJ700-5',
      name: 'SGS',
      position: LatLng(2.9925463325179167, 101.72430695038778),
    ),
    BusStop(
      id: 'SJ827-5',
      name: 'Banquet Hall',
      position: LatLng(2.9878375695781485, 101.72503795411446),
    ),
    BusStop(
      id: 'SJ831-5',
      name: 'Sports Academy',
      position: LatLng(2.9874379317132123, 101.72592839245425),
    ),
    BusStop(
      id: 'SJ830-5',
      name: 'FP',
      position: LatLng(2.9831610495743246, 101.73395716737106),
    ),
    BusStop(
      id: 'SJ882-5',
      name: 'FP Cafeteria',
      position: LatLng(2.9836469496928983, 101.73592187569136),
    ),
  ];

  Set<Marker> _route1BusStopMarkers = Set<Marker>();
  Set<Marker> _route2BusStopMarkers = Set<Marker>();
  Set<Marker> _route3BusStopMarkers = Set<Marker>();
  Set<Marker> _route4BusStopMarkers = Set<Marker>();
  Set<Marker> _route5BusStopMarkers = Set<Marker>();
  Set<Marker> _getMyLocationMarker = Set<Marker>();

  Set<Polyline> _polylines = Set<Polyline>();

  List<LatLng> roadCoordinatesRoute1 = [
    LatLng(2.991621392694718, 101.70760515415567),
    LatLng(2.991520998102801, 101.70761314769751),
    LatLng(2.9907171435228257, 101.70770010942849),
    LatLng(2.9905446607193134, 101.70792385780781),
    LatLng(2.9905097365655955, 101.71045675473334),
    LatLng(2.9905072547116167, 101.7107351014217),
    LatLng(2.9904946736271425, 101.71096985557979),
    LatLng(2.99049980914963, 101.71147818767012),
    LatLng(2.9905916377437958, 101.71179629817112),
    LatLng(2.9916886165838825, 101.71288980308277),
    LatLng(2.9918598643144136, 101.713128386008),
    LatLng(2.991934319839523, 101.71339927698149),
    LatLng(2.991951692801737, 101.71453503098758),
    LatLng(2.9919914024134493, 101.71489539058041),
    LatLng(2.992031112022719, 101.7157875911452),
    LatLng(2.99204352127737, 101.71760430046506),
    LatLng(2.992080749034327, 101.7177061952349),
    LatLng(2.99208571273516, 101.7179547190638),
    LatLng(2.9921973959979273, 101.71807401050168),
    LatLng(2.9931256075864705, 101.71846916343922),
    LatLng(2.996440013231157, 101.7205277417902),
    LatLng(2.9975672469152785, 101.72105776309851),
    LatLng(2.999086804119085, 101.72156207812499),
    LatLng(2.9997640918100563, 101.72167511427119),
    LatLng(3.000510844418602, 101.72162294376237),
    LatLng(3.0012730688401286, 101.72146487994381),
    LatLng(3.0011646580101887, 101.72070279068615),
    LatLng(3.0011863401775227, 101.72055080704506),
    LatLng(3.0008806215873, 101.71918078323695),
    LatLng(3.0008199115020484, 101.7190613675413),
    LatLng(3.0003410640710824, 101.71645475588676),
    LatLng(2.99983507902807, 101.7136022394701),
    LatLng(2.9996889845279076, 101.71331661598855),
    LatLng(2.9996395257454487, 101.71323151466471),
    LatLng(2.9996333294751127, 101.71314245532906),
    LatLng(2.9996990325952884, 101.71307062573325),
    LatLng(2.999772467101826, 101.71305189178614),
    LatLng(3.0000203695270784, 101.71106249342165),
    LatLng(3.0001185557941703, 101.71014185112803),
    LatLng(3.0001542598898303, 101.7095161718703),
    LatLng(3.000186988642652, 101.70696876370917),
    LatLng(3.0006124623528008, 101.70698664021101),
    LatLng(3.0023530348426792, 101.70698664021144),
    LatLng(3.0034211796681416, 101.70705516698143),
    LatLng(3.0042334451045942, 101.70692109286725),
    LatLng(3.004177404041656, 101.70863004951426),
    LatLng(3.0041870229539565, 101.7093114243268),
    LatLng(3.004107556216379, 101.70947057651071),
    LatLng(3.0039353782651155, 101.70959436154261),
    LatLng(3.0036749038770028, 101.70966951674056),
    LatLng(3.0033895382720317, 101.70967643515753),
    LatLng(3.001899530705045, 101.70965419526968),
    LatLng(2.998896976761488, 101.70954317562156),
    LatLng(2.9985806553319065, 101.70950061144056),
    LatLng(2.9962326921026965, 101.70900124582738),
    LatLng(2.995365191139604, 101.70876716817361),
    LatLng(2.9950547235768026, 101.70839058310906),
    LatLng(2.99502355585406, 101.70761552599876),
    LatLng(2.9950287504742055, 101.70744907081766),
    LatLng(2.994794992534458, 101.7072826155674),
    LatLng(2.993454643132772, 101.70724046748276),
    LatLng(2.9921930156259755, 101.70754115147894),
    LatLng(2.9920069415350716, 101.7075644424967),
    LatLng(2.991754412373068, 101.70760104265666),
    LatLng(2.991621392694718, 101.70760515415567),
  ];

  List<LatLng> roadCoordinatesRoute2 = [
    LatLng(2.991621392694718, 101.70760515415567), // Starting Bus Stop 1: PFC
    LatLng(2.991520998102801, 101.70761314769751),
    LatLng(2.9907171435228257, 101.70770010942849),
    LatLng(2.9905446607193134, 101.70792385780781),
    LatLng(2.9905097365655955, 101.71045675473334),
    LatLng(2.9905072547116167, 101.7107351014217), // Bus Stop 2: KTAG
    LatLng(2.9904946736271425, 101.71096985557979),
    LatLng(2.99049980914963, 101.71147818767012),
    LatLng(2.9905916377437958, 101.71179629817112),
    LatLng(2.9916886165838825, 101.71288980308277),
    LatLng(2.9918598643144136, 101.713128386008),
    LatLng(2.991934319839523, 101.71339927698149),
    LatLng(2.991951692801737, 101.71453503098758),
    LatLng(2.9919914024134493, 101.71489539058041),
    LatLng(2.992031112022719, 101.7157875911452),
    LatLng(2.99204352127737, 101.71760430046506),
    LatLng(2.992080749034327, 101.7177061952349),
    LatLng(2.99208571273516, 101.7179547190638),
    LatLng(2.9921973959979273, 101.71807401050168),
    LatLng(2.9931256075864705, 101.71846916343922),
    LatLng(2.996440013231157, 101.7205277417902),
    LatLng(2.9975672469152785, 101.72105776309851),
    LatLng(2.999086804119085, 101.72156207812499),
    LatLng(2.9997640918100563, 101.72167511427119),
    LatLng(3.000510844418602, 101.72162294376237),
    LatLng(3.0012730688401286, 101.72146487994381),
    LatLng(3.0011646580101887, 101.72070279068615),
    LatLng(3.0011863401775227, 101.72055080704506),
    LatLng(3.0008806215873, 101.71918078323695),
    LatLng(3.0008199115020484, 101.7190613675413),
    LatLng(3.0003410640710824, 101.71645475588676),
    LatLng(2.99983507902807, 101.7136022394701),
    LatLng(2.9996889845279076, 101.71331661598855),
    LatLng(2.9996395257454487, 101.71323151466471),
    LatLng(2.9996333294751127, 101.71314245532906),
    LatLng(2.9996990325952884, 101.71307062573325),
    LatLng(2.999772467101826, 101.71305189178614),
    LatLng(3.0000203695270784, 101.71106249342165),
    LatLng(3.0001185557941703, 101.71014185112803),
    LatLng(3.0001542598898303, 101.7095161718703),
    LatLng(3.000186988642652, 101.70696876370917),
    LatLng(3.0006124623528008, 101.70698664021101),
    LatLng(3.0023530348426792, 101.70698664021144),
    LatLng(3.0034211796681416, 101.70705516698143),
    LatLng(3.0042334451045942, 101.70692109286725),
    LatLng(3.004177404041656, 101.70863004951426),
    LatLng(3.0041870229539565, 101.7093114243268),
    LatLng(3.004107556216379, 101.70947057651071),
    LatLng(3.0039353782651155, 101.70959436154261),
    LatLng(3.0036749038770028, 101.70966951674056),
    LatLng(3.0033895382720317, 101.70967643515753),
    LatLng(3.001899530705045, 101.70965419526968),
    LatLng(2.998896976761488, 101.70954317562156),
    LatLng(2.9985806553319065, 101.70950061144056),
    LatLng(2.9962326921026965, 101.70900124582738),
    LatLng(2.995365191139604, 101.70876716817361),
    LatLng(2.9950547235768026, 101.70839058310906),
    LatLng(2.99502355585406, 101.70761552599876),
    LatLng(2.9950287504742055, 101.70744907081766),
    LatLng(2.994794992534458, 101.7072826155674),
    LatLng(2.993454643132772, 101.70724046748276),
    LatLng(2.9921930156259755, 101.70754115147894),
    LatLng(2.9920069415350716, 101.7075644424967),
    LatLng(2.991754412373068, 101.70760104265666),
    LatLng(2.991621392694718, 101.70760515415567),
  ];

  List<LatLng> roadCoordinatesRoute3 = [
    LatLng(3.0093538865047247, 101.72009214034568),
    LatLng(3.0101157734443866, 101.71930137344236),
    LatLng(3.0100023009552275, 101.71918542521605),
    LatLng(3.009302939624124, 101.71863583062286),
    LatLng(3.008862943858412, 101.71838306348924),
    LatLng(3.008388211378421, 101.71935007169816),
    LatLng(3.0081705291049845, 101.719918218007),
    LatLng(3.008089769046511, 101.72006386303954),
    LatLng(3.006928410088234, 101.7197507679799),
    LatLng(3.004157288897445, 101.71869689611795),
    LatLng(3.0036423427403927, 101.718524564189),
    LatLng(3.0035385499205116, 101.71849908320343),
    LatLng(3.003490336479989, 101.71853194026376),
    LatLng(3.0034401141438543, 101.718532610816),
    LatLng(3.0033430176194758, 101.71891147283888),
    LatLng(3.0032847305399, 101.71934458206985),
    LatLng(3.0032740164397893, 101.71967315267538),
    LatLng(3.0033302654646694, 101.7200634140858),
    LatLng(3.0033858448581743, 101.7202625681061),
    LatLng(3.0037012411095123, 101.72097067128477),
    LatLng(3.003755481219468, 101.72105717252522),
    LatLng(3.003754120727928, 101.7210610112958),
    LatLng(3.0036940632957787, 101.72097484046687),
    LatLng(3.003375848481385, 101.72025495499703),
    LatLng(3.003289796010455, 101.71987257194365),
    LatLng(3.003266490131738, 101.71966522338656),
    LatLng(3.0032742946755655, 101.71936643441617),
    LatLng(3.0032943059470214, 101.71912287788415),
    LatLng(3.0033291267716424, 101.71893579380595),
    LatLng(3.0034179462709103, 101.71857130994493),
    LatLng(3.003331397046497, 101.71848464167597),
    LatLng(3.0031655110138944, 101.71844672430831),
    LatLng(3.0025722879172534, 101.71845214107508),
    LatLng(3.0019285773840876, 101.71847200255311),
    LatLng(3.0017771160303703, 101.7184557522527),
    LatLng(3.001232576217443, 101.71838352869486),
    LatLng(3.0009621093235688, 101.71838172310466),
    LatLng(3.00084671009157, 101.7183853342825),
    LatLng(3.0007186890600788, 101.71837269515991),
    LatLng(3.000659186322035, 101.7182625542348),
    LatLng(3.0003149731535643, 101.71644342325106),
    LatLng(3.0002986887888468, 101.7161752683438),
    LatLng(3.0000115823288986, 101.71483896409994),
    LatLng(2.9997766568925877, 101.71356585827048),
    LatLng(2.999740381636913, 101.71351396536981),
    LatLng(2.9996889845279076, 101.71331661598855),
    LatLng(2.9996395257454487, 101.71323151466471),
    LatLng(2.9996333294751127, 101.71314245532906),
    LatLng(2.9996990325952884, 101.71307062573325),
    LatLng(2.999772467101826, 101.71305189178614),
    LatLng(3.0000203695270784, 101.71106249342165),
    LatLng(3.0001185557941703, 101.71014185112803),
    LatLng(3.0001542598898303, 101.7095161718703),
    LatLng(3.000186988642652, 101.70696876370917),
    LatLng(3.0006124623528008, 101.70698664021101),
    LatLng(3.0023530348426792, 101.70698664021144),
    LatLng(3.0034211796681416, 101.70705516698143),
    LatLng(3.0042334451045942, 101.70692109286725),
    LatLng(3.004177404041656, 101.70863004951426),
    LatLng(3.0041870229539565, 101.7093114243268),
    LatLng(3.004107556216379, 101.70947057651071),
    LatLng(3.0039353782651155, 101.70959436154261),
    LatLng(3.0036749038770028, 101.70966951674056),
    LatLng(3.0033895382720317, 101.70967643515753),
    LatLng(3.001899530705045, 101.70965419526968),
    LatLng(3.001449760030355, 101.7096414321997),
    LatLng(3.0004268680619797, 101.70959379049657),
    LatLng(3.0002875145695573, 101.709762093027),
    LatLng(3.000182170743548, 101.70994083729175),
    LatLng(3.00006147722427, 101.71151866751302),
    LatLng(3.0000175524818973, 101.71204907516292),
    LatLng(2.999834102062915, 101.71310471575566),
    LatLng(2.999870275386367, 101.71315905019783),
    LatLng(2.999867691577596, 101.71323667082955),
    LatLng(2.999813431591846, 101.7133246408788),
    LatLng(2.999836685871775, 101.71350316833167),
    LatLng(2.999859940150928, 101.7136325360574),
    LatLng(3.0002707656728695, 101.71571794369557),
    LatLng(3.0003999560650985, 101.71632597198129),
    LatLng(3.0004387131785815, 101.716393243197),
    LatLng(3.000800446169597, 101.71810607180682),
    LatLng(3.0009063822341115, 101.71819921656486),
    LatLng(3.00101490209442, 101.7182432015895),
    LatLng(3.0014424837976907, 101.7182708647747),
    LatLng(3.0019739300635315, 101.71835069123985),
    LatLng(3.0027559148132053, 101.71831267863739),
    LatLng(3.0033554367770128, 101.71830707037152),

    LatLng(3.0035017901293273, 101.71828441463371),
    LatLng(3.0035860253112086, 101.7184489683344),
    LatLng(3.003514218271321, 101.71855129584574),
    LatLng(3.003449315750435, 101.71856927230043),

    LatLng(3.0033666254284896, 101.71890585928146),
    LatLng(3.003358085399534, 101.71893301840306),
    LatLng(3.003339104722436, 101.71912122983139),
    LatLng(3.0033110707254527, 101.71934581027307),
    LatLng(3.00329787825603, 101.7196694703214),
    // LatLng(3.0032861958057424, 101.71966989550229),
    LatLng(3.0033380929212763, 101.72004934799422),
    LatLng(3.003390813796452, 101.72024897299971),
    LatLng(3.0036995685148744, 101.72093871939894),
    LatLng(3.0037793517231766, 101.72107261804666),
    LatLng(3.0037401958235037, 101.72108687614508),
    LatLng(3.0036618840199343, 101.72096330595869),
    LatLng(3.003356113979596, 101.72027414614973),
    LatLng(3.003299519979326, 101.72006408420569),
    LatLng(3.0032627001260006, 101.71987383245555),
    LatLng(3.0032420810076075, 101.71967325696706),
    LatLng(3.0032509177726707, 101.71933699805987),
    LatLng(3.003268591302621, 101.71911282545206),
    LatLng(3.003308356743932, 101.71893142262056),
    LatLng(3.00341881629555, 101.71851109898655),
    LatLng(3.003362850124128, 101.71846685439351),
    LatLng(3.003362850124128, 101.71838868894578),
    LatLng(3.0034497449679933, 101.71831642277712),
    LatLng(3.0035867147925903, 101.71836214218995),
    LatLng(3.0042353828617068, 101.71861969021239),
    LatLng(3.0070334636022196, 101.71965125226217),
    LatLng(3.008123900547188, 101.71993917463685),
    LatLng(3.0082353849073913, 101.71960911390923),
    LatLng(3.008354139967417, 101.71934700686113),
    LatLng(3.0090884822131927, 101.71984209795279),
    LatLng(3.0093538865047247, 101.72009214034568),

  ];

  List<LatLng> roadCoordinatesRoute4 = [
    LatLng(2.9781750765702664, 101.71455617972484),
    LatLng(2.9782174279856704, 101.71473906721164),
    LatLng(2.9782293393204786, 101.71486231747448),
    LatLng(2.978232822565636, 101.71499894243874),
    LatLng(2.978210633149574, 101.71517669785513),
    LatLng(2.97819105425267, 101.7153100144174),
    LatLng(2.9781492859381147, 101.7154956119845),
    LatLng(2.9781375385993587, 101.71561063019509),
    LatLng(2.9781871384732463, 101.71572434138055),
    LatLng(2.978294771352272, 101.71580363791638),
    LatLng(2.979331770481007, 101.71607682884402),
    LatLng(2.9796483253584416, 101.71613293209569),
    LatLng(2.980102147224825, 101.71610488046984),
    LatLng(2.980385213176475, 101.71599737902567),
    LatLng(2.9804481363047657, 101.7159034004595),
    LatLng(2.980450367264187, 101.71576548750608),
    LatLng(2.9805289111336335, 101.7156578608327),
    LatLng(2.9805206433581617, 101.71533705055624),
    LatLng(2.980386291990484, 101.71486307924461),
    LatLng(2.9794617408570963, 101.71251995805514),
    LatLng(2.9794424204460093, 101.7124232252434),
    LatLng(2.979421613848599, 101.71186217493509),
    LatLng(2.9794528237422147, 101.71151988960112),
    LatLng(2.979442420444432, 101.7113070774152),
    LatLng(2.979561315270218, 101.71112254097427),
    LatLng(2.980129568492452, 101.71085656581836),
    LatLng(2.9802037390578136, 101.71081490159789),
    LatLng(2.9806523803601688, 101.71046528444357),
    LatLng(2.9812855431898586, 101.70976967311061),
    LatLng(2.981497200400042, 101.70950881886078),
    LatLng(2.981985639952186, 101.70908855368049),
    LatLng(2.9831316465967608, 101.70830278965867),
    LatLng(2.9836478037951464, 101.70787016061853),
    LatLng(2.9844392443299186, 101.70711210265446),
    LatLng(2.9848521696186814, 101.70671775937014),
    LatLng(2.9852345076934346, 101.70643061620193),
    LatLng(2.985762134018069, 101.7061626159116),
    LatLng(2.986126277282352, 101.70601362294806),
    LatLng(2.986822271625854, 101.7058594702493),
    LatLng(2.9883374631805464, 101.70571181327549),
    LatLng(2.9883890138742877, 101.70571215115685),
    LatLng(2.9892901863367873, 101.70548188130424),
    LatLng(2.990888470321564, 101.70467391849415),
    LatLng(2.9916432982105885, 101.70426591950262),
    LatLng(2.9920625042404985, 101.70408212471885),
    LatLng(2.9926635729052498, 101.70396221669982),
    LatLng(2.993662504227182, 101.70391501172206),
    LatLng(2.9943471645111175, 101.70383633675914),
    LatLng(2.995512208366044, 101.70358907259),
    LatLng(2.9960678343522504, 101.70349750807755),
    LatLng(2.9982871054565825, 101.703487521171),
    LatLng(2.9983494037762792, 101.70359210564244),
    LatLng(2.9983152698115125, 101.70425250175302),
    LatLng(2.9982760835778843, 101.70557183768005),
    LatLng(2.998423052278996, 101.7062215401411),
    LatLng(2.998620205379566, 101.70692149583121),
    LatLng(2.998967008826348, 101.70692785410236),
    LatLng(2.9995896218006357, 101.7069618436787),
    LatLng(3.0009210612319444, 101.70698362117874),
    LatLng(3.0023660699040966, 101.70699813951211),
    LatLng(3.0033930397826305, 101.70704411423442),
    LatLng(3.0042315297648705, 101.70692312812305),
    LatLng(3.0042001166123997, 101.70784262256933),
    LatLng(3.0041807854382645, 101.7086362914598),
    LatLng(3.0041807854366103, 101.7093307517391),
    LatLng(3.004091378751797, 101.70949771257278),
    LatLng(3.0039560605063103, 101.7095945014619),
    LatLng(3.0037748306874406, 101.70965015507313),
    LatLng(3.003685423967247, 101.70966951285095),
    LatLng(3.0031175703111894, 101.70968403118431),
    LatLng(3.001822112030174, 101.70965290867011),
    LatLng(3.0017063268852167, 101.70966160759136),
    LatLng(3.0004410896742177, 101.709594419533),
    LatLng(3.000188681059766, 101.70994635698162),
    LatLng(3.0001610991649414, 101.71055480850036),
    LatLng(3.000065554500925, 101.71134275721687),
    LatLng(3.000009856178071, 101.71206677965037),
    LatLng(2.999828812935704, 101.7131232033733),
    LatLng(2.999875500768863, 101.71317385126457),
    LatLng(2.999850575873873, 101.71326580124875),
    LatLng(2.999813826138738, 101.71331392453956),
    LatLng(2.999828917036646, 101.71348025595675),
    LatLng(2.999814185102259, 101.71355736946595),
    LatLng(3.000155679108734, 101.71524425498147),
    LatLng(3.0003751676483974, 101.71631332968167),
    LatLng(3.0004305725202105, 101.7163944171838),
    LatLng(3.0007736564397764, 101.71810579025681),
    LatLng(3.0009931448564418, 101.71826156361631),
    LatLng(3.0014001572475837, 101.71828076855104),
    LatLng(3.0019563362188686, 101.7183703915798),
    LatLng(3.0033091019869382, 101.71832770228254),
    LatLng(3.0034729006957894, 101.71828318148108),
    LatLng(3.003533740208371, 101.71831364308208),
    LatLng(3.003589899755444, 101.71839096868457),
    LatLng(3.003533740208371, 101.71851750148866),
    LatLng(3.003426101068411, 101.71852453108892),
    LatLng(3.0033301618260277, 101.71846595108701),
    LatLng(3.0024741135141904, 101.71843747675472),
    LatLng(3.0019342882634845, 101.71847418193353),
    LatLng(3.001339988803237, 101.71837595696749),
    LatLng(3.000925845766, 101.71836552738291),
    LatLng(3.0007148030357107, 101.71835918740759),
    LatLng(3.000672594482808, 101.71827888105332),
    LatLng(3.0004298952895367, 101.71690310640598),
    LatLng(3.0003264843058175, 101.71641704163036),
    LatLng(3.0003307051622143, 101.71634941522683),
    LatLng(3.0000183617366325, 101.71484684107278),
    LatLng(2.9997841041149513, 101.71358307265629),
    LatLng(2.999731343382476, 101.71348163305096),
    LatLng(2.9996806930743, 101.71327664051522),
    LatLng(2.999611048900296, 101.71311814113187),
    LatLng(2.999532963002963, 101.71294907512299),
    LatLng(2.99925438623546, 101.71234889079143),
    LatLng(2.999136202133929, 101.71191988579388),
    LatLng(2.999041232751697, 101.71097522946908),
    LatLng(2.9988555148344713, 101.70953816839354),
    LatLng(2.998591710915679, 101.70805461416549),
    LatLng(2.998604373504361, 101.70746499645949),
    LatLng(2.998564275304577, 101.70691341860544),
    LatLng(2.9982498209434665, 101.70576799639518),
    LatLng(2.9982308270518248, 101.7055313039827),
    LatLng(2.9982941400171272, 101.70372018436248),
    LatLng(2.9981295262991163, 101.70354900502848),
    LatLng(2.996083067456943, 101.7035548559328),
    LatLng(2.9943084809265756, 101.70390839800118),
    LatLng(2.9936928473451707, 101.70399112023024),
    LatLng(2.993634716373783, 101.7040275017329),
    LatLng(2.993491486709613, 101.7040438187627),
    LatLng(2.993122787648066, 101.7040734920674),
    LatLng(2.992690543171915, 101.7040772888644),
    LatLng(2.99212090912754, 101.70419508453459),
    LatLng(2.9918803839940753, 101.70428320165067),
    LatLng(2.9916183484266896, 101.70440264929691),
    LatLng(2.991115787504855, 101.70463567011507),
    LatLng(2.991031020405482, 101.7046767211656),
    LatLng(2.989691544779214, 101.70535180139616),
    LatLng(2.9888606836307017, 101.7056784280845),
    LatLng(2.9867919406811962, 101.70592429493131),
    LatLng(2.9861389275716634, 101.7060786156118),
    LatLng(2.9857538582156655, 101.7062543327595),
    LatLng(2.985320599078553, 101.70652349057671),
    LatLng(2.9847707402180723, 101.70696962887645),
    LatLng(2.9846668653363824, 101.70710208729355),
    LatLng(2.9842286963153946, 101.70748062888117),
    LatLng(2.9835070057909934, 101.70811357991255),
    LatLng(2.982988227959795, 101.70850673569221),
    LatLng(2.9819468446165525, 101.70924519642364),
    LatLng(2.9814744610883652, 101.70967727199856),
    LatLng(2.9805946211118104, 101.71061575363392),
    LatLng(2.9805907822979294, 101.71062767701456),
    LatLng(2.9802068248491533, 101.7109569903583),
    LatLng(2.979677143062724, 101.71121674625337),
    LatLng(2.9795495032335224, 101.7113607604758),
    LatLng(2.9795117506051474, 101.71152817700937),
    LatLng(2.979441638570735, 101.71186120989876),
    LatLng(2.979466806991395, 101.71242826589956),
    LatLng(2.9795566942074623, 101.71275769843338),
    LatLng(2.9804016336550276, 101.71484590465857),
    LatLng(2.9805562395237213, 101.71534455390373),
    LatLng(2.980662306332098, 101.71563078217082),
    LatLng(2.980815114422067, 101.71571899088205),
    LatLng(2.9807935415165314, 101.71590800954898),
    LatLng(2.980709047632468, 101.71598001666021),
    LatLng(2.980565228240396, 101.71599801843801),
    LatLng(2.9805041049930625, 101.71596561523796),
    LatLng(2.9804322982709257, 101.71599764723403),
    LatLng(2.980394128492805, 101.71601038772684),
    LatLng(2.9801262402544264, 101.71611972044164),
    LatLng(2.9796447650944993, 101.71615391860658),
    LatLng(2.9793122539101127, 101.71610089637447),
    LatLng(2.978794701193362, 101.71596285096953),
    LatLng(2.978298148142406, 101.71582493220282),
    LatLng(2.9781504182452236, 101.71572289798512),
    LatLng(2.9781105803957355, 101.71561879030864),
    LatLng(2.9781105803957355, 101.71556235811018),
    LatLng(2.9781134953603736, 101.7154884124708),
    LatLng(2.978137786733169, 101.71538430479431),
    LatLng(2.978172766307544, 101.71525879180118),
    LatLng(2.9782019159527944, 101.7149474417407),
    LatLng(2.9781931710595413, 101.71474603717031),
    LatLng(2.9781416733515256, 101.7145261461901),
    LatLng(2.9780810145035206, 101.7143300171776),
    LatLng(2.9780883806166245, 101.71432264110281),
    LatLng(2.9781750765702664, 101.71455617972484),
  ];

  List<LatLng> roadCoordinatesRoute5 = [
    LatLng(2.991720962366472, 101.707556203837),
    LatLng(2.991733689682825, 101.70762144500674), // Starting Bus Stop 1: PFC
    LatLng(2.991520998102801, 101.70761314769751),
    LatLng(2.9907171435228257, 101.70770010942849),
    LatLng(2.9905446607193134, 101.70792385780781),
    LatLng(2.9905097365655955, 101.71045675473334),
    LatLng(2.9905072547116167, 101.7107351014217), // Bus Stop 2: KTAG
    LatLng(2.9904946736271425, 101.71096985557979),
    LatLng(2.99049980914963, 101.71147818767012),
    LatLng(2.9905916377437958, 101.71179629817112),
    LatLng(2.9916886165838825, 101.71288980308277),
    LatLng(2.9918598643144136, 101.713128386008),
    LatLng(2.991934319839523, 101.71339927698149),
    LatLng(2.991951692801737, 101.71453503098758),
    LatLng(2.9919914024134493, 101.71489539058041),
    LatLng(2.992031112022719, 101.7157875911452),
    LatLng(2.99204352127737, 101.71760430046506),
    LatLng(2.992066615302367, 101.71774437022239),
    LatLng(2.992079618435328, 101.71794691730267),
    LatLng(2.9921489684752105, 101.71799466054303),
    LatLng(2.9921533028525635, 101.71811763555606),
    LatLng(2.9921027351157727, 101.718169719091),
    LatLng(2.9921446340978455, 101.71827822645542),
    LatLng(2.992212539341248, 101.7184243497062),
    LatLng(2.99244529261938, 101.71882131014057),
    LatLng(2.9926950152631124, 101.71896258888478),
    LatLng(2.9927741696937185, 101.71908306793541),
    LatLng(2.9927488402782783, 101.71930817353001),
    LatLng(2.992644356426241, 101.7198931310259),
    LatLng(2.9927011105076833, 101.71995955648059),
    LatLng(2.992646600245777, 101.72008510130111),
    LatLng(2.9925498445242065, 101.72014787371137),
    LatLng(2.992511687335904, 101.72023111538584),
    LatLng(2.99246535360545, 101.72030889858986),
    LatLng(2.9920915985007914, 101.72114829562658),
    LatLng(2.9919783867577157, 101.72132520642649),
    LatLng(2.9918170818171883, 101.72146598519589),
    LatLng(2.9915021005592437, 101.72165887083717),
    LatLng(2.9913433187771967, 101.72186392400167),
    LatLng(2.9912973268078265, 101.72210625955962),
    LatLng(2.991236068466891, 101.72305732092627),
    LatLng(2.9912480765630023, 101.72320161467927),
    LatLng(2.9912465755528523, 101.72321063303882),
    LatLng(2.991381666625147, 101.72356084600185),
    LatLng(2.991999918791966, 101.72413790741037),
    LatLng(2.9921922127157727, 101.72429283618628),
    LatLng(2.9926036064313024, 101.72468352487955),
    LatLng(2.9926622047367797, 101.72465767495646),
    LatLng(2.9926869909460234, 101.72459645214455),
    LatLng(2.9926638571507467, 101.72453853867385),
    LatLng(2.992407732956135, 101.72416954713185),
    LatLng(2.9924093853704714, 101.7241215616847),
    LatLng(2.9924407812426708, 101.72408184959049),
    LatLng(2.9927481302597494, 101.7238336490017),
    LatLng(2.9927762212946507, 101.72383695834289),
    LatLng(2.992802397616754, 101.72385369295858),
    LatLng(2.993040763758468, 101.7241479807251),
    LatLng(2.9930274438832005, 101.72419163259094),
    LatLng(2.992665427633015, 101.72449980639983),
    LatLng(2.9926970674710227, 101.72454611239247),
    LatLng(2.9927059915277328, 101.72459160599927),
    LatLng(2.9927027464162004, 101.7246289757477),
    LatLng(2.992680030635285, 101.72467609412617),
    LatLng(2.9926110720102628, 101.72471183910294),
    LatLng(2.992585111115563, 101.72470371524459),
    LatLng(2.9925364344327345, 101.72466553311024),
    LatLng(2.9924212329500186, 101.72453473899071),
    LatLng(2.9922553369099263, 101.72436976365137),
    LatLng(2.992140608397243, 101.72428413178453),
    LatLng(2.991771788212132, 101.72400430683052),
    LatLng(2.991550043498094, 101.72380718317875),
    LatLng(2.9913135911782667, 101.72349337138824),
    LatLng(2.9912796506490342, 101.7234186003479),
    LatLng(2.9912242144512375, 101.723219210907),
    LatLng(2.991209506888093, 101.72309572540101),
    LatLng(2.991211769588966, 101.72308779513916),
    LatLng(2.991227608503082, 101.72263123863532),
    LatLng(2.9912835046394535, 101.72200385675139),
    LatLng(2.9913004749034715, 101.72193135150015),
    LatLng(2.991311788412673, 101.72186224493257),
    LatLng(2.991333284079812, 101.72180899888868),
    LatLng(2.9914113472942554, 101.72170703837915),
    LatLng(2.9918125943068397, 101.72143276231029),
    LatLng(2.9919658010026344, 101.72130146049088),
    LatLng(2.9920624178238358, 101.72113422343669),
    LatLng(2.992457644599481, 101.72027369617176),
    LatLng(2.992457644599481, 101.7201146388528),
    LatLng(2.992405343481927, 101.71999437600186),
    LatLng(2.992461518756398, 101.71988381176796),
    LatLng(2.992554498514736, 101.71984889674674),
    LatLng(2.9925685455070283, 101.71981411670893),
    LatLng(2.992699744299059, 101.71923167443266),
    LatLng(2.992691990869086, 101.71906710170497),
    LatLng(2.9926318992141177, 101.7189958433532),
    LatLng(2.992549668523035, 101.71893408611498),
    LatLng(2.9924595310276563, 101.71891033333105),
    LatLng(2.9924769259834827, 101.71915577876496),
    LatLng(2.9924532055891047, 101.71940280771781),
    LatLng(2.9924105088779402, 101.7195469079403),
    LatLng(2.992299064037923, 101.71980343983907),
    LatLng(2.9922357441179805, 101.71990291835874),
    LatLng(2.9921318224336138, 101.72001175547447),
    LatLng(2.991922998732919, 101.72018978276859),
    LatLng(2.9918162167899887, 101.72024515603799),
    LatLng(2.9913872694088646, 101.72039471143611),
    LatLng(2.9911338734449258, 101.72040676205339),
    LatLng(2.9905453806756888, 101.72035746471377),
    LatLng(2.9896254152791832, 101.72020042069028),
    LatLng(2.989597139954331, 101.72020985864371),
    LatLng(2.989277941043521, 101.72031796385458),
    LatLng(2.98886905476985, 101.72065015372185),
    LatLng(2.988732759313313, 101.72090509013161),
    LatLng(2.988411307693965, 101.72206904222467),
    LatLng(2.9883213012218555, 101.72243470859013),
    LatLng(2.9881241671525673, 101.72344894602749),
    LatLng(2.9880430951625923, 101.72374158014205),
    LatLng(2.988031782791419, 101.72389828099051),
    LatLng(2.9879356276311144, 101.72430419282679),
    LatLng(2.9878233696092162, 101.72482341720506),
    LatLng(2.9877422975970283, 101.72513304297789),
    LatLng(2.987421780274435, 101.72645839232251),
    LatLng(2.9871634809560317, 101.72769689541373),
    LatLng(2.98716913714611, 101.72783282867982),
    LatLng(2.987229469839631, 101.7283274747315),
    LatLng(2.9873878431429897, 101.72879191339071),
    LatLng(2.988344088469682, 101.73045728066165),
    LatLng(2.988365186081103, 101.73064909723824),
    LatLng(2.9879824705309437, 101.7308539541315),
    LatLng(2.9878091201099766, 101.73090761743688),
    LatLng(2.987314784514506, 101.73097228510572),
    LatLng(2.986591924184103, 101.73095030107348),
    LatLng(2.986389048421542, 101.73096862559402),
    LatLng(2.985275154420979, 101.73131946616908),
    LatLng(2.984603457240231, 101.73157135176113),
    LatLng(2.983339049290458, 101.73228327727598),
    LatLng(2.983139753691463, 101.73240554475942),
    LatLng(2.9829705565232483, 101.73262396237448),
    LatLng(2.9827707815172366, 101.73352008698204),
    LatLng(2.982687381421437, 101.73376317952585),
    LatLng(2.9828855677950146, 101.73384274212684),
    LatLng(2.982985427142873, 101.73386469221258),
    LatLng(2.9830503763073315, 101.73386469221258),
    LatLng(2.983256727403623, 101.73379618585624),
    LatLng(2.9833212639651565, 101.73379496653276),
    LatLng(2.9839997908020517, 101.7339808147648),
    LatLng(2.9840807175756594, 101.73407925462438),
    LatLng(2.984260724557282, 101.73473850748125),
    LatLng(2.984495110515414, 101.73558831726395),
    LatLng(2.983602029769113, 101.73584238155921),
    LatLng(2.9827355407745917, 101.73608758202803),
    LatLng(2.9824048649449706, 101.73497734148762),
    LatLng(2.982422155186771, 101.73491241514022),
    LatLng(2.9824626064517625, 101.73487649911324),
    LatLng(2.9829656318426947, 101.73471514296371),
    LatLng(2.9829700055652135, 101.73467572605232),
    LatLng(2.982974379287707, 101.73463046959847),
    LatLng(2.9828561758275267, 101.73425110042275),
    LatLng(2.982873670719231, 101.73420146431211),
    LatLng(2.982902828871434, 101.7341635072863),
    LatLng(2.9833962457274015, 101.7340169564063),
    LatLng(2.983446647518204, 101.73386748697598),
    LatLng(2.9834358028645434, 101.7338442208519),
    LatLng(2.9833143383609104, 101.73381923363543),
    LatLng(2.9830531910399696, 101.73389062904971),
    LatLng(2.9828827778796976, 101.7338696481835),
    LatLng(2.9826510078695745, 101.73376461015702),
    LatLng(2.9827498492494193, 101.73347939053862),
    LatLng(2.982893821863072, 101.73278121007344),
    LatLng(2.982941648327682, 101.73260773694733),
    LatLng(2.982943773950122, 101.73260667269498),
    LatLng(2.9830309243912363, 101.73246725564272),
    LatLng(2.9831031954835163, 101.73238637246735),
    LatLng(2.984608199899561, 101.73152056151287),
    LatLng(2.9862899518102366, 101.7309351578889),
    LatLng(2.9866278756658504, 101.73090682036133),
    LatLng(2.9874117051173794, 101.73093729458537),
    LatLng(2.9876807208035263, 101.73089944755395),
    LatLng(2.987935285181491, 101.73083933756297),
    LatLng(2.988303236202888, 101.73064676296204),
    LatLng(2.9883021245685955, 101.73056661630733),
    LatLng(2.9882898965912736, 101.73053990075577),
    LatLng(2.987878591814472, 101.72984418326685),
    LatLng(2.9874017004026383, 101.72905718764335),
    LatLng(2.987246071457286, 101.72868316992127),
    LatLng(2.987129349735028, 101.72824347646824),
    LatLng(2.987074879593949, 101.72775257820804),
    LatLng(2.987075991229488, 101.72761232156225),
    LatLng(2.9871460242665937, 101.72712364959797),
    LatLng(2.9873442550468723, 101.72627322069746),
    LatLng(2.9875964131597046, 101.72535205862725),
    LatLng(2.9877732548252807, 101.72467223875068),
    LatLng(2.9879892388811875, 101.72375109615648),
    LatLng(2.988076115255152, 101.72346836355916),
    LatLng(2.9882911342428957, 101.72238962995712),
    LatLng(2.9886885934765752, 101.72091072098655),
    LatLng(2.988860174190533, 101.72061058946016),
    LatLng(2.9889122999717403, 101.72053664401163),
    LatLng(2.9890404425066928, 101.7204235509727),
    LatLng(2.989561840249049, 101.7201655994606),
    LatLng(2.9905392806096773, 101.72031877795051),
    LatLng(2.9915327397308826, 101.72032435953784),
    LatLng(2.9918103029781746, 101.72022226065178),
    LatLng(2.9920750068648365, 101.71996739026116),
    LatLng(2.9922277206165377, 101.71973290950177),
    LatLng(2.9923125615805017, 101.71953920800489),
    LatLng(2.992373647070503, 101.71922996526428),
    LatLng(2.992325699019763, 101.71888169257066),
    LatLng(2.9920313765281294, 101.71820170297954),
    LatLng(2.991958521523336, 101.71804737624778),
    LatLng(2.9920285744126494, 101.71795478020871),
    LatLng(2.992020168066173, 101.71778081189291),
    LatLng(2.9920341786463944, 101.71761526139886),
    LatLng(2.9920227473562915, 101.71655436968305),
    LatLng(2.9919667050438794, 101.71483432810896),
    LatLng(2.991910662729278, 101.71340049247385),
    LatLng(2.9917761611615727, 101.71303010831758),
    LatLng(2.9913222182453145, 101.71255309841936),
    LatLng(2.990585261137269, 101.71182916575044),
    LatLng(2.9904955933201, 101.71160188456363),
    LatLng(2.9904899890812917, 101.71154015387094),
    LatLng(2.9904787806035724, 101.71106594991335),
    LatLng(2.9905362746460615, 101.70790572745317),
    LatLng(2.990698093248244, 101.70771913675797),
    LatLng(2.991309744451051, 101.70765741637862),
    LatLng(2.991720962366472, 101.707556203837),
  ];

  List<PatternItem> _getArrowPattern() {
    return [PatternItem.dot, PatternItem.gap(10), PatternItem.dash(10)];
  }

  List<Widget> _pages = [];
  int _selectedRoute = 1;
  late GoogleMapController _googleMapController;

  User user = User(userID: "001");

  @override
  void initState() {
    super.initState();
    // Create Bus Stop markers for Route 1
    _route1BusStopMarkers.addAll(busStopsRoute1.map((busStop) {
      return Marker(
        markerId: MarkerId(busStop.id),
        position: busStop.position,
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
        infoWindow: InfoWindow(
          title: busStop.name,
          snippet: '',
        ),
      );
    }));

    // Create Bus Stop markers for Route 2
    _route2BusStopMarkers.addAll(busStopsRoute2.map((busStop) {
      return Marker(
        markerId: MarkerId(busStop.id),
        position: busStop.position,
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
        infoWindow: InfoWindow(
          title: busStop.name,
          snippet: '',
        ),
      );
    }));

    // Create Bus Stop markers for Route 3
    _route3BusStopMarkers.addAll(busStopsRoute3.map((busStop) {
      return Marker(
        markerId: MarkerId(busStop.id),
        position: busStop.position,
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
        infoWindow: InfoWindow(
          title: busStop.name,
          snippet: '',
        ),
      );
    }));

    // Create Bus Stop markers for Route 4
    _route4BusStopMarkers.addAll(busStopsRoute4.map((busStop) {
      return Marker(
        markerId: MarkerId(busStop.id),
        position: busStop.position,
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
        infoWindow: InfoWindow(
          title: busStop.name,
          snippet: '',
        ),
      );
    }));

    // Create Bus Stop markers for Route 5
    _route5BusStopMarkers.addAll(busStopsRoute5.map((busStop) {
      return Marker(
        markerId: MarkerId(busStop.id),
        position: busStop.position,
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
        infoWindow: InfoWindow(
          title: busStop.name,
          snippet: '',
        ),
      );
    }));


    // Initialize the polylines for Route 1 (blue).
    _polylines.add(Polyline(
      polylineId: PolylineId('route1'),
      color: Colors.blue,
      width: 6,
      points: roadCoordinatesRoute1,
    ));

    // Initialize the polylines for Route 2 (red).
    _polylines.add(Polyline(
      polylineId: PolylineId('route2'),
      color: Colors.green, // Set the color to red for Route 2.
      width: 6,
      points: roadCoordinatesRoute2, // Replace with Route 2 coordinates.
    ));

    // Initialize the polylines for Route 3 (green).
    _polylines.add(Polyline(
      polylineId: PolylineId('route3'),
      color: Colors.orange, // Set the color to red for Route 3.
      width: 6,
      points: roadCoordinatesRoute3, // Replace with Route 3 coordinates.
    ));

    // Initialize the polylines for Route 4 (purple).
    _polylines.add(Polyline(
      polylineId: PolylineId('route4'),
      color: Colors.lightBlueAccent, // Set the color to red for Route 4.
      width: 6,
      points: roadCoordinatesRoute4, // Replace with Route 4 coordinates.
    ));

    // Initialize the polylines for Route 4 (purple).
    _polylines.add(Polyline(
      polylineId: PolylineId('route5'),
      color: Colors.deepPurple, // Set the color to red for Route 4.
      width: 6,
      points: roadCoordinatesRoute5,
      // Replace with Route 4 coordinates.
    ));


    _pages = [
      // const Text('Bus Stops'),
      _buildBusStopsPage(), // Bus Stops Page
      const Text('Bus Routes'),
      const Text('Navigation'),
      const Text('Starred'),
      const Text('Messages'),
    ];
  }

  Widget _buildBusStopsPage() {
    List<Map<String, String>> manualBusStops = [
      {'name': 'Putra Foodcourt', 'shortName': 'PFC'},
      {'name': 'Tan Sri Aishah Ghani College', 'shortName': 'KTAG'},
      {'name': 'Serumpun Foodcourt', 'shortName': 'SFC'},
      {'name': 'Fourteenth College', 'shortName': 'K14'},
      {'name': 'Institute of Bioscience', 'shortName': 'IBS'},
      {'name': 'Faculty of Modern Languages & Communication', 'shortName': 'FBMK'},
      {'name': 'Faculty of Computer Science & Information Technology', 'shortName': 'FSKTM'},
      {'name': 'Faculty of Science', 'shortName': 'FS'},
      {'name': 'Sultan Abdul Samad Library', 'shortName': 'PSAS'},
      {'name': 'Faculty of Food Science & Technology', 'shortName': 'FSTM'},
      {'name': 'Central (Great Hall & Experimental Theatre)', 'shortName': 'Central'},
      {'name': 'Academic Complex A (Opp FBMK)', 'shortName': 'KAA'},
      {'name': 'Faculty of Design & Architecture', 'shortName': 'FRSB'},
      {'name': 'Tenth College', 'shortName': 'K10'},
      {'name': 'Tan Sri Mustaffa Babjee', 'shortName': 'KMB'},
      {'name': 'Tenth College', 'shortName': 'K10'},
      {'name': 'School of Graduate Studies', 'shortName': 'SGS'},
      {'name': 'Banquet Hall', 'shortName': 'Banquet'},
      {'name': 'Sports Academy', 'shortName': 'Academy'},
      {'name': 'Faculty of Agriculture Cafeteria', 'shortName': 'FPC'},
      {'name': 'Faculty of Agriculture', 'shortName': 'FP'},
      // Add more bus stop names and short names as needed
    ];

    return ListView.builder(
      itemCount: manualBusStops.length,
      itemBuilder: (context, index) {
        String busStopName = manualBusStops[index]['name']!;
        String busStopShortName = manualBusStops[index]['shortName']!;

        return Column(
          children: [
            ListTile(
              title: Text(
                busStopName,
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              subtitle: Text(busStopShortName),
              // You can customize the ListTile further if needed
            ),
            SizedBox(
              height: 0, // Adjust the height as needed
            ),
            Divider(
              color: Colors.grey,
              thickness: 0,
            ),
          ],
        );
      },
    );
  }


  CameraPosition _getInitialCameraPosition() {
    switch (_selectedRoute) {
      case 1:
        return CameraPosition(
            target: LatLng(2.998255379276642, 101.71427184760564), zoom: 14.9);
      case 2:
        return CameraPosition(
            target: LatLng(2.998255379276642, 101.71427184760564), zoom: 14.9);
      case 3:
        return CameraPosition(
            target: LatLng(3.0050310471490635, 101.71331130494058), zoom: 14.9);
      case 4:
        return CameraPosition(
            target: LatLng(2.9916115616191914, 101.71238176524159), zoom: 14.1);
      case 5:
        return CameraPosition(
            target: LatLng(2.989740819024872, 101.72134254839467), zoom: 14.1);
      default:
        return CameraPosition(target: LatLng(0, 0), zoom: 10);
    }
  }

  void _updateSelectedRoute(int route) {
    setState(() {
      _selectedRoute = route;
      _googleMapController.animateCamera(
        CameraUpdate.newCameraPosition(
          _getInitialCameraPosition(),
        ),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        leading: IconButton(
          icon: Image.asset('assets/images/p_logo.png'),// Use your own asset image
          iconSize: 40,
          onPressed: () {
            // Handle icon button press
          },
        ),
        titleSpacing: 0.0, // This removes the default spacing on the left of the title
        centerTitle: false,
        title: Text(
          'Bus Routes',
          style: TextStyle(
            color: Colors.white, // Set the title font color to white
            fontWeight: FontWeight.w600, // Set the title font weight to bold
          ),
          textAlign: TextAlign.left,
        ),
        backgroundColor: Color(0xFF00D161),
        actions: <Widget>[
          IconButton(
            icon: Icon(Icons.menu, color: Colors.white), // Hamburger icon
            onPressed: () => _scaffoldKey.currentState?.openDrawer(),
          ),
        ],// Set the background colorx of the AppBar
      ),
      drawer: widget.mainStatus != 'driver' ?
      SidebarPage(mainStatus: widget.mainStatus) :
      SidebarPageDriver(mainStatus: widget.mainStatus),
      body: Column(
        children: [
          Expanded(
            child: GoogleMap(
              mapType: _isSatelliteView ? MapType.satellite : MapType.normal,
              myLocationButtonEnabled: false,
              zoomControlsEnabled: false,
              markers: _selectedRoute == 1
                  ? {..._route1BusStopMarkers, ..._getMyLocationMarker}
                  : _selectedRoute == 2
                  ? {..._route2BusStopMarkers, ..._getMyLocationMarker}
                  : _selectedRoute == 3
                  ? {..._route3BusStopMarkers, ..._getMyLocationMarker}
                  : _selectedRoute == 4
                  ? {..._route4BusStopMarkers, ..._getMyLocationMarker}
                  : {..._route5BusStopMarkers, ..._getMyLocationMarker},
              polylines: _polylines.where((polyline) {
                if (_selectedRoute == 1) {
                  return polyline.polylineId.value == 'route1';
                } else if (_selectedRoute == 2) {
                  return polyline.polylineId.value == 'route2';
                } else if (_selectedRoute == 3) {
                  return polyline.polylineId.value == 'route3';
                } else if (_selectedRoute == 4) {
                  return polyline.polylineId.value == 'route4';
                } else {
                  return polyline.polylineId.value == 'route5';
                }
              }).toSet(),
              initialCameraPosition: _getInitialCameraPosition(),
              onMapCreated: (GoogleMapController controller) {
                _googleMapController = controller;
              },
            ),
          ),


          Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              buildElevatedButton(1, 'Route 1', 'route1.png',
                  'PFC > KTAG > K14 > IBS > FBMK > FSKTM > FS > PSAS > FSTM > Central'),
              SizedBox(width: 16),
              buildElevatedButton(2, 'Route 2', 'route2.png',
                  'SFC > K14 > IBS > FBMK > FSKTM > FS > PSAS > FSTM > Central'),
              SizedBox(width: 16),
              buildElevatedButton(3, 'Route 3', 'route3.png',
                  'K10 > FRSB > FBMK > FSKTM > FS > PSAS > FSTM > Central > KAA > FRSB '),
              SizedBox(width: 16),
              buildElevatedButton(4, 'Route 4', 'route4.png',
                  'KMB > FS > Library > FSTM > Central > FSKTM > KAA > FBMK'),
              SizedBox(width: 16),
              buildElevatedButton(5, 'Route 5', 'route5.png',
                  'PFC > KTAG > SFC > SGS > Banquet Hall > FPC > FP > Sports Academy'),
            ],
          ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          Padding(
            padding: const EdgeInsets.fromLTRB(16.0, 8.0, 0.0, .0),
            child: FloatingActionButton(
              onPressed: () {
                setState(() {
                  _isSatelliteView = !_isSatelliteView;
                });
              },
              child: Icon(_isSatelliteView ? Icons.map : Icons.public),
              backgroundColor: Colors.white,
              mini: true,
              shape: CircleBorder(),
            ),
          ),
          Padding(
            padding: const EdgeInsets.fromLTRB(16.0, 16.0, 0.0, 250.0),
            child: FloatingActionButton(
              onPressed: () async {
                user.updateUserLocation();
                LatLng position = user.userLocation;

                _googleMapController.animateCamera(
                  CameraUpdate.newCameraPosition(
                    CameraPosition(target: position, zoom: 14),
                  ),
                );

                setState(() {
                  _getMyLocationMarker.clear(); // Clear existing markers
                  _getMyLocationMarker.add(
                    Marker(
                      markerId: MarkerId("user_location"),
                      position: position,
                      icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),
                    ),
                  );
                });
              },

              child: Icon(Icons.my_location),
              backgroundColor: Colors.white, // Customize the color as needed
              mini: true,
              shape: CircleBorder(),
            ),
          ),
        ],
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,
    );
  }

  Widget buildElevatedButton(int route, String buttonText, String iconAsset, String subtitle) {
    return ElevatedButton(
      onPressed: () {
        setState(() {
          _selectedRoute = route;
          _updateSelectedRoute(route);
        });
      },
      style: ElevatedButton.styleFrom(
        primary: getButtonColor(route),
        minimumSize: Size(400, 50),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(0),
        ),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Image.asset(
                'assets/images/$iconAsset',
                height: 30,
                width: 30,
              ),
              SizedBox(width: 10),
              Text(
                buttonText,
                style: TextStyle(
                  color: _selectedRoute == route ? Colors.white : Colors.black,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          Padding(
            padding: const EdgeInsets.only(left: 40.0), // Adjust left padding as needed
            child: Text(
              subtitle,
              style: TextStyle(
                color: _selectedRoute == route ? Colors.white : Colors.black,
                fontSize: 8.6, // Adjust the font size as needed
              ),
            ),
          ),
        ],
      ),
    );
  }

  Color getButtonColor(int route) {
    if (_selectedRoute == route) {
      switch (route) {
        case 1:
          return Colors.blue;
        case 2:
          return Colors.green;
        case 3:
          return Colors.orange;
        case 4:
          return Colors.lightBlueAccent;
        case 5:
          return Colors.deepPurple;
        default:
          return Colors.white;
      }
    } else {
      return Colors.white; // Default color when not selected
    }
  }
}



